# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from cooperative_driving_vision/Features.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import cooperative_driving_vision.msg
import geometry_msgs.msg
import std_msgs.msg

class Features(genpy.Message):
  _md5sum = "b06b1ffd262cf7d0705951b2a3148fc6"
  _type = "cooperative_driving_vision/Features"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """# Exchange format for extracted features

# Standard ROS message header
Header header
# Width of the image the features where extracted from
uint16 image_width
# Height of the image the features where extracted from
uint16 image_height
# List of points in the image at which a vertical line
# (the lane marker) has been extracted. The list is ordered
# inversely by the y-coordinate, i.e. from bottom of the
# image to the top.
geometry_msgs/Point[] Hlines # z-coordinate unused
geometry_msgs/Point[] Vlines
# The processed frames per second
uint16 PFPS
# List of colored regions found in the image
Region[] regions
uint16 box_width
uint16 box_height
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: cooperative_driving_vision/Region
# Custom message type to represent an extracted region used for publishing

# The region's average color
std_msgs/ColorRGBA color
# The geometrical moment describing the extents of the region
Moment moment

================================================================================
MSG: std_msgs/ColorRGBA
float32 r
float32 g
float32 b
float32 a

================================================================================
MSG: cooperative_driving_vision/Moment
# Custom message type to represent a geometrical moment

# (0, 0)th raw moment, i.e. number of pixels
float32 m00
# (1, 0)th raw moment
float32 m10
# (0, 1)th raw moment
float32 m01
# (1, 1)th raw moment
float32 m11
# (2, 0)th raw moment
float32 m20
# (0, 2)th raw moment
float32 m02
# (2, 1)th raw moment
float32 m21
# (1, 2)th raw moment
float32 m12
# (3, 0)th raw moment
float32 m30
# (0, 3)th raw moment
float32 m03
"""
  __slots__ = ['header','image_width','image_height','Hlines','Vlines','PFPS','regions','box_width','box_height']
  _slot_types = ['std_msgs/Header','uint16','uint16','geometry_msgs/Point[]','geometry_msgs/Point[]','uint16','cooperative_driving_vision/Region[]','uint16','uint16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,image_width,image_height,Hlines,Vlines,PFPS,regions,box_width,box_height

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Features, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.image_width is None:
        self.image_width = 0
      if self.image_height is None:
        self.image_height = 0
      if self.Hlines is None:
        self.Hlines = []
      if self.Vlines is None:
        self.Vlines = []
      if self.PFPS is None:
        self.PFPS = 0
      if self.regions is None:
        self.regions = []
      if self.box_width is None:
        self.box_width = 0
      if self.box_height is None:
        self.box_height = 0
    else:
      self.header = std_msgs.msg.Header()
      self.image_width = 0
      self.image_height = 0
      self.Hlines = []
      self.Vlines = []
      self.PFPS = 0
      self.regions = []
      self.box_width = 0
      self.box_height = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2H().pack(_x.image_width, _x.image_height))
      length = len(self.Hlines)
      buff.write(_struct_I.pack(length))
      for val1 in self.Hlines:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.Vlines)
      buff.write(_struct_I.pack(length))
      for val1 in self.Vlines:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      buff.write(_get_struct_H().pack(self.PFPS))
      length = len(self.regions)
      buff.write(_struct_I.pack(length))
      for val1 in self.regions:
        _v1 = val1.color
        _x = _v1
        buff.write(_get_struct_4f().pack(_x.r, _x.g, _x.b, _x.a))
        _v2 = val1.moment
        _x = _v2
        buff.write(_get_struct_10f().pack(_x.m00, _x.m10, _x.m01, _x.m11, _x.m20, _x.m02, _x.m21, _x.m12, _x.m30, _x.m03))
      _x = self
      buff.write(_get_struct_2H().pack(_x.box_width, _x.box_height))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.Hlines is None:
        self.Hlines = None
      if self.Vlines is None:
        self.Vlines = None
      if self.regions is None:
        self.regions = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 4
      (_x.image_width, _x.image_height,) = _get_struct_2H().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.Hlines = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.Hlines.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.Vlines = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.Vlines.append(val1)
      start = end
      end += 2
      (self.PFPS,) = _get_struct_H().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.regions = []
      for i in range(0, length):
        val1 = cooperative_driving_vision.msg.Region()
        _v3 = val1.color
        _x = _v3
        start = end
        end += 16
        (_x.r, _x.g, _x.b, _x.a,) = _get_struct_4f().unpack(str[start:end])
        _v4 = val1.moment
        _x = _v4
        start = end
        end += 40
        (_x.m00, _x.m10, _x.m01, _x.m11, _x.m20, _x.m02, _x.m21, _x.m12, _x.m30, _x.m03,) = _get_struct_10f().unpack(str[start:end])
        self.regions.append(val1)
      _x = self
      start = end
      end += 4
      (_x.box_width, _x.box_height,) = _get_struct_2H().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2H().pack(_x.image_width, _x.image_height))
      length = len(self.Hlines)
      buff.write(_struct_I.pack(length))
      for val1 in self.Hlines:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.Vlines)
      buff.write(_struct_I.pack(length))
      for val1 in self.Vlines:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      buff.write(_get_struct_H().pack(self.PFPS))
      length = len(self.regions)
      buff.write(_struct_I.pack(length))
      for val1 in self.regions:
        _v5 = val1.color
        _x = _v5
        buff.write(_get_struct_4f().pack(_x.r, _x.g, _x.b, _x.a))
        _v6 = val1.moment
        _x = _v6
        buff.write(_get_struct_10f().pack(_x.m00, _x.m10, _x.m01, _x.m11, _x.m20, _x.m02, _x.m21, _x.m12, _x.m30, _x.m03))
      _x = self
      buff.write(_get_struct_2H().pack(_x.box_width, _x.box_height))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.Hlines is None:
        self.Hlines = None
      if self.Vlines is None:
        self.Vlines = None
      if self.regions is None:
        self.regions = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 4
      (_x.image_width, _x.image_height,) = _get_struct_2H().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.Hlines = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.Hlines.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.Vlines = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.Vlines.append(val1)
      start = end
      end += 2
      (self.PFPS,) = _get_struct_H().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.regions = []
      for i in range(0, length):
        val1 = cooperative_driving_vision.msg.Region()
        _v7 = val1.color
        _x = _v7
        start = end
        end += 16
        (_x.r, _x.g, _x.b, _x.a,) = _get_struct_4f().unpack(str[start:end])
        _v8 = val1.moment
        _x = _v8
        start = end
        end += 40
        (_x.m00, _x.m10, _x.m01, _x.m11, _x.m20, _x.m02, _x.m21, _x.m12, _x.m30, _x.m03,) = _get_struct_10f().unpack(str[start:end])
        self.regions.append(val1)
      _x = self
      start = end
      end += 4
      (_x.box_width, _x.box_height,) = _get_struct_2H().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_H = None
def _get_struct_H():
    global _struct_H
    if _struct_H is None:
        _struct_H = struct.Struct("<H")
    return _struct_H
_struct_10f = None
def _get_struct_10f():
    global _struct_10f
    if _struct_10f is None:
        _struct_10f = struct.Struct("<10f")
    return _struct_10f
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_4f = None
def _get_struct_4f():
    global _struct_4f
    if _struct_4f is None:
        _struct_4f = struct.Struct("<4f")
    return _struct_4f
_struct_2H = None
def _get_struct_2H():
    global _struct_2H
    if _struct_2H is None:
        _struct_2H = struct.Struct("<2H")
    return _struct_2H
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
