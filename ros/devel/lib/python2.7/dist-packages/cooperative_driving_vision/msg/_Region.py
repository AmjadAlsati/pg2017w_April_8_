# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from cooperative_driving_vision/Region.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import cooperative_driving_vision.msg
import std_msgs.msg

class Region(genpy.Message):
  _md5sum = "b981b501a8a1ad1a59b87231a82a1888"
  _type = "cooperative_driving_vision/Region"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# Custom message type to represent an extracted region used for publishing

# The region's average color
std_msgs/ColorRGBA color
# The geometrical moment describing the extents of the region
Moment moment

================================================================================
MSG: std_msgs/ColorRGBA
float32 r
float32 g
float32 b
float32 a

================================================================================
MSG: cooperative_driving_vision/Moment
# Custom message type to represent a geometrical moment

# (0, 0)th raw moment, i.e. number of pixels
float32 m00
# (1, 0)th raw moment
float32 m10
# (0, 1)th raw moment
float32 m01
# (1, 1)th raw moment
float32 m11
# (2, 0)th raw moment
float32 m20
# (0, 2)th raw moment
float32 m02
# (2, 1)th raw moment
float32 m21
# (1, 2)th raw moment
float32 m12
# (3, 0)th raw moment
float32 m30
# (0, 3)th raw moment
float32 m03
"""
  __slots__ = ['color','moment']
  _slot_types = ['std_msgs/ColorRGBA','cooperative_driving_vision/Moment']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       color,moment

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Region, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.color is None:
        self.color = std_msgs.msg.ColorRGBA()
      if self.moment is None:
        self.moment = cooperative_driving_vision.msg.Moment()
    else:
      self.color = std_msgs.msg.ColorRGBA()
      self.moment = cooperative_driving_vision.msg.Moment()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_14f().pack(_x.color.r, _x.color.g, _x.color.b, _x.color.a, _x.moment.m00, _x.moment.m10, _x.moment.m01, _x.moment.m11, _x.moment.m20, _x.moment.m02, _x.moment.m21, _x.moment.m12, _x.moment.m30, _x.moment.m03))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.color is None:
        self.color = std_msgs.msg.ColorRGBA()
      if self.moment is None:
        self.moment = cooperative_driving_vision.msg.Moment()
      end = 0
      _x = self
      start = end
      end += 56
      (_x.color.r, _x.color.g, _x.color.b, _x.color.a, _x.moment.m00, _x.moment.m10, _x.moment.m01, _x.moment.m11, _x.moment.m20, _x.moment.m02, _x.moment.m21, _x.moment.m12, _x.moment.m30, _x.moment.m03,) = _get_struct_14f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_14f().pack(_x.color.r, _x.color.g, _x.color.b, _x.color.a, _x.moment.m00, _x.moment.m10, _x.moment.m01, _x.moment.m11, _x.moment.m20, _x.moment.m02, _x.moment.m21, _x.moment.m12, _x.moment.m30, _x.moment.m03))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.color is None:
        self.color = std_msgs.msg.ColorRGBA()
      if self.moment is None:
        self.moment = cooperative_driving_vision.msg.Moment()
      end = 0
      _x = self
      start = end
      end += 56
      (_x.color.r, _x.color.g, _x.color.b, _x.color.a, _x.moment.m00, _x.moment.m10, _x.moment.m01, _x.moment.m11, _x.moment.m20, _x.moment.m02, _x.moment.m21, _x.moment.m12, _x.moment.m30, _x.moment.m03,) = _get_struct_14f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_14f = None
def _get_struct_14f():
    global _struct_14f
    if _struct_14f is None:
        _struct_14f = struct.Struct("<14f")
    return _struct_14f
