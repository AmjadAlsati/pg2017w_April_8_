// Generated by gencpp from file cooperative_driving_vision/Features.msg
// DO NOT EDIT!


#ifndef COOPERATIVE_DRIVING_VISION_MESSAGE_FEATURES_H
#define COOPERATIVE_DRIVING_VISION_MESSAGE_FEATURES_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <cooperative_driving_vision/Region.h>

namespace cooperative_driving_vision
{
template <class ContainerAllocator>
struct Features_
{
  typedef Features_<ContainerAllocator> Type;

  Features_()
    : header()
    , image_width(0)
    , image_height(0)
    , Hlines()
    , Vlines()
    , PFPS(0)
    , regions()
    , box_width(0)
    , box_height(0)  {
    }
  Features_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , image_width(0)
    , image_height(0)
    , Hlines(_alloc)
    , Vlines(_alloc)
    , PFPS(0)
    , regions(_alloc)
    , box_width(0)
    , box_height(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint16_t _image_width_type;
  _image_width_type image_width;

   typedef uint16_t _image_height_type;
  _image_height_type image_height;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point_<ContainerAllocator> >::other >  _Hlines_type;
  _Hlines_type Hlines;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point_<ContainerAllocator> >::other >  _Vlines_type;
  _Vlines_type Vlines;

   typedef uint16_t _PFPS_type;
  _PFPS_type PFPS;

   typedef std::vector< ::cooperative_driving_vision::Region_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::cooperative_driving_vision::Region_<ContainerAllocator> >::other >  _regions_type;
  _regions_type regions;

   typedef uint16_t _box_width_type;
  _box_width_type box_width;

   typedef uint16_t _box_height_type;
  _box_height_type box_height;




  typedef boost::shared_ptr< ::cooperative_driving_vision::Features_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cooperative_driving_vision::Features_<ContainerAllocator> const> ConstPtr;

}; // struct Features_

typedef ::cooperative_driving_vision::Features_<std::allocator<void> > Features;

typedef boost::shared_ptr< ::cooperative_driving_vision::Features > FeaturesPtr;
typedef boost::shared_ptr< ::cooperative_driving_vision::Features const> FeaturesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cooperative_driving_vision::Features_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cooperative_driving_vision::Features_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace cooperative_driving_vision

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'cooperative_driving_vision': ['/home/amjad/Desktop/pg2017w/ros/src/cooperative_driving/cooperative_driving_vision/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::cooperative_driving_vision::Features_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cooperative_driving_vision::Features_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cooperative_driving_vision::Features_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cooperative_driving_vision::Features_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cooperative_driving_vision::Features_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cooperative_driving_vision::Features_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cooperative_driving_vision::Features_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b06b1ffd262cf7d0705951b2a3148fc6";
  }

  static const char* value(const ::cooperative_driving_vision::Features_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb06b1ffd262cf7d0ULL;
  static const uint64_t static_value2 = 0x705951b2a3148fc6ULL;
};

template<class ContainerAllocator>
struct DataType< ::cooperative_driving_vision::Features_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cooperative_driving_vision/Features";
  }

  static const char* value(const ::cooperative_driving_vision::Features_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cooperative_driving_vision::Features_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Exchange format for extracted features\n\
\n\
# Standard ROS message header\n\
Header header\n\
# Width of the image the features where extracted from\n\
uint16 image_width\n\
# Height of the image the features where extracted from\n\
uint16 image_height\n\
# List of points in the image at which a vertical line\n\
# (the lane marker) has been extracted. The list is ordered\n\
# inversely by the y-coordinate, i.e. from bottom of the\n\
# image to the top.\n\
geometry_msgs/Point[] Hlines # z-coordinate unused\n\
geometry_msgs/Point[] Vlines\n\
# The processed frames per second\n\
uint16 PFPS\n\
# List of colored regions found in the image\n\
Region[] regions\n\
uint16 box_width\n\
uint16 box_height\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: cooperative_driving_vision/Region\n\
# Custom message type to represent an extracted region used for publishing\n\
\n\
# The region's average color\n\
std_msgs/ColorRGBA color\n\
# The geometrical moment describing the extents of the region\n\
Moment moment\n\
\n\
================================================================================\n\
MSG: std_msgs/ColorRGBA\n\
float32 r\n\
float32 g\n\
float32 b\n\
float32 a\n\
\n\
================================================================================\n\
MSG: cooperative_driving_vision/Moment\n\
# Custom message type to represent a geometrical moment\n\
\n\
# (0, 0)th raw moment, i.e. number of pixels\n\
float32 m00\n\
# (1, 0)th raw moment\n\
float32 m10\n\
# (0, 1)th raw moment\n\
float32 m01\n\
# (1, 1)th raw moment\n\
float32 m11\n\
# (2, 0)th raw moment\n\
float32 m20\n\
# (0, 2)th raw moment\n\
float32 m02\n\
# (2, 1)th raw moment\n\
float32 m21\n\
# (1, 2)th raw moment\n\
float32 m12\n\
# (3, 0)th raw moment\n\
float32 m30\n\
# (0, 3)th raw moment\n\
float32 m03\n\
";
  }

  static const char* value(const ::cooperative_driving_vision::Features_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cooperative_driving_vision::Features_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.image_width);
      stream.next(m.image_height);
      stream.next(m.Hlines);
      stream.next(m.Vlines);
      stream.next(m.PFPS);
      stream.next(m.regions);
      stream.next(m.box_width);
      stream.next(m.box_height);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Features_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cooperative_driving_vision::Features_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cooperative_driving_vision::Features_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "image_width: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.image_width);
    s << indent << "image_height: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.image_height);
    s << indent << "Hlines[]" << std::endl;
    for (size_t i = 0; i < v.Hlines.size(); ++i)
    {
      s << indent << "  Hlines[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.Hlines[i]);
    }
    s << indent << "Vlines[]" << std::endl;
    for (size_t i = 0; i < v.Vlines.size(); ++i)
    {
      s << indent << "  Vlines[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.Vlines[i]);
    }
    s << indent << "PFPS: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.PFPS);
    s << indent << "regions[]" << std::endl;
    for (size_t i = 0; i < v.regions.size(); ++i)
    {
      s << indent << "  regions[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::cooperative_driving_vision::Region_<ContainerAllocator> >::stream(s, indent + "    ", v.regions[i]);
    }
    s << indent << "box_width: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.box_width);
    s << indent << "box_height: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.box_height);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COOPERATIVE_DRIVING_VISION_MESSAGE_FEATURES_H
