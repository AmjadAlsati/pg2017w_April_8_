// Generated by gencpp from file cooperative_driving_vision/Region.msg
// DO NOT EDIT!


#ifndef COOPERATIVE_DRIVING_VISION_MESSAGE_REGION_H
#define COOPERATIVE_DRIVING_VISION_MESSAGE_REGION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/ColorRGBA.h>
#include <cooperative_driving_vision/Moment.h>

namespace cooperative_driving_vision
{
template <class ContainerAllocator>
struct Region_
{
  typedef Region_<ContainerAllocator> Type;

  Region_()
    : color()
    , moment()  {
    }
  Region_(const ContainerAllocator& _alloc)
    : color(_alloc)
    , moment(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::ColorRGBA_<ContainerAllocator>  _color_type;
  _color_type color;

   typedef  ::cooperative_driving_vision::Moment_<ContainerAllocator>  _moment_type;
  _moment_type moment;




  typedef boost::shared_ptr< ::cooperative_driving_vision::Region_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cooperative_driving_vision::Region_<ContainerAllocator> const> ConstPtr;

}; // struct Region_

typedef ::cooperative_driving_vision::Region_<std::allocator<void> > Region;

typedef boost::shared_ptr< ::cooperative_driving_vision::Region > RegionPtr;
typedef boost::shared_ptr< ::cooperative_driving_vision::Region const> RegionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cooperative_driving_vision::Region_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cooperative_driving_vision::Region_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace cooperative_driving_vision

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'cooperative_driving_vision': ['/home/amjad/Desktop/pg2017w/ros/src/cooperative_driving/cooperative_driving_vision/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::cooperative_driving_vision::Region_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cooperative_driving_vision::Region_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cooperative_driving_vision::Region_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cooperative_driving_vision::Region_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cooperative_driving_vision::Region_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cooperative_driving_vision::Region_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cooperative_driving_vision::Region_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b981b501a8a1ad1a59b87231a82a1888";
  }

  static const char* value(const ::cooperative_driving_vision::Region_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb981b501a8a1ad1aULL;
  static const uint64_t static_value2 = 0x59b87231a82a1888ULL;
};

template<class ContainerAllocator>
struct DataType< ::cooperative_driving_vision::Region_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cooperative_driving_vision/Region";
  }

  static const char* value(const ::cooperative_driving_vision::Region_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cooperative_driving_vision::Region_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Custom message type to represent an extracted region used for publishing\n\
\n\
# The region's average color\n\
std_msgs/ColorRGBA color\n\
# The geometrical moment describing the extents of the region\n\
Moment moment\n\
\n\
================================================================================\n\
MSG: std_msgs/ColorRGBA\n\
float32 r\n\
float32 g\n\
float32 b\n\
float32 a\n\
\n\
================================================================================\n\
MSG: cooperative_driving_vision/Moment\n\
# Custom message type to represent a geometrical moment\n\
\n\
# (0, 0)th raw moment, i.e. number of pixels\n\
float32 m00\n\
# (1, 0)th raw moment\n\
float32 m10\n\
# (0, 1)th raw moment\n\
float32 m01\n\
# (1, 1)th raw moment\n\
float32 m11\n\
# (2, 0)th raw moment\n\
float32 m20\n\
# (0, 2)th raw moment\n\
float32 m02\n\
# (2, 1)th raw moment\n\
float32 m21\n\
# (1, 2)th raw moment\n\
float32 m12\n\
# (3, 0)th raw moment\n\
float32 m30\n\
# (0, 3)th raw moment\n\
float32 m03\n\
";
  }

  static const char* value(const ::cooperative_driving_vision::Region_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cooperative_driving_vision::Region_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.color);
      stream.next(m.moment);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Region_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cooperative_driving_vision::Region_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cooperative_driving_vision::Region_<ContainerAllocator>& v)
  {
    s << indent << "color: ";
    s << std::endl;
    Printer< ::std_msgs::ColorRGBA_<ContainerAllocator> >::stream(s, indent + "  ", v.color);
    s << indent << "moment: ";
    s << std::endl;
    Printer< ::cooperative_driving_vision::Moment_<ContainerAllocator> >::stream(s, indent + "  ", v.moment);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COOPERATIVE_DRIVING_VISION_MESSAGE_REGION_H
