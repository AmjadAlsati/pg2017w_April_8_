// Generated by gencpp from file cooperative_driving_logic/ChangeStateRequest.msg
// DO NOT EDIT!


#ifndef COOPERATIVE_DRIVING_LOGIC_MESSAGE_CHANGESTATEREQUEST_H
#define COOPERATIVE_DRIVING_LOGIC_MESSAGE_CHANGESTATEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace cooperative_driving_logic
{
template <class ContainerAllocator>
struct ChangeStateRequest_
{
  typedef ChangeStateRequest_<ContainerAllocator> Type;

  ChangeStateRequest_()
    : target_state()
    , tag_id_to_follow(0)  {
    }
  ChangeStateRequest_(const ContainerAllocator& _alloc)
    : target_state(_alloc)
    , tag_id_to_follow(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _target_state_type;
  _target_state_type target_state;

   typedef int8_t _tag_id_to_follow_type;
  _tag_id_to_follow_type tag_id_to_follow;


    static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  REMOTE_CONTROL;
     static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  FOLLOW_BLOB;
     static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  FOLLOW_LINE;
     static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  PLATOONING;
     static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  DYNAMIC_FOLLOW_LINE;
     static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  IDLE;
 

  typedef boost::shared_ptr< ::cooperative_driving_logic::ChangeStateRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cooperative_driving_logic::ChangeStateRequest_<ContainerAllocator> const> ConstPtr;

}; // struct ChangeStateRequest_

typedef ::cooperative_driving_logic::ChangeStateRequest_<std::allocator<void> > ChangeStateRequest;

typedef boost::shared_ptr< ::cooperative_driving_logic::ChangeStateRequest > ChangeStateRequestPtr;
typedef boost::shared_ptr< ::cooperative_driving_logic::ChangeStateRequest const> ChangeStateRequestConstPtr;

// constants requiring out of line definition

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      ChangeStateRequest_<ContainerAllocator>::REMOTE_CONTROL =
        
          "remote_control"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      ChangeStateRequest_<ContainerAllocator>::FOLLOW_BLOB =
        
          "follow_blob"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      ChangeStateRequest_<ContainerAllocator>::FOLLOW_LINE =
        
          "follow_line"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      ChangeStateRequest_<ContainerAllocator>::PLATOONING =
        
          "platooning"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      ChangeStateRequest_<ContainerAllocator>::DYNAMIC_FOLLOW_LINE =
        
          "dynamic_follow_line"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      ChangeStateRequest_<ContainerAllocator>::IDLE =
        
          "idle"
        
        ;
   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cooperative_driving_logic::ChangeStateRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cooperative_driving_logic::ChangeStateRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace cooperative_driving_logic

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'cooperative_driving_logic': ['/home/amjad/Desktop/pg2017w/ros/src/cooperative_driving/cooperative_driving_logic/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::cooperative_driving_logic::ChangeStateRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cooperative_driving_logic::ChangeStateRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cooperative_driving_logic::ChangeStateRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cooperative_driving_logic::ChangeStateRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cooperative_driving_logic::ChangeStateRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cooperative_driving_logic::ChangeStateRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cooperative_driving_logic::ChangeStateRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "47b07bdab417ccb3c955c49a6d18057b";
  }

  static const char* value(const ::cooperative_driving_logic::ChangeStateRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x47b07bdab417ccb3ULL;
  static const uint64_t static_value2 = 0xc955c49a6d18057bULL;
};

template<class ContainerAllocator>
struct DataType< ::cooperative_driving_logic::ChangeStateRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cooperative_driving_logic/ChangeStateRequest";
  }

  static const char* value(const ::cooperative_driving_logic::ChangeStateRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cooperative_driving_logic::ChangeStateRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n\
string REMOTE_CONTROL=remote_control\n\
string FOLLOW_BLOB=follow_blob\n\
string FOLLOW_LINE=follow_line\n\
string PLATOONING=platooning\n\
string DYNAMIC_FOLLOW_LINE=dynamic_follow_line\n\
string IDLE=idle\n\
\n\
string target_state\n\
int8 tag_id_to_follow\n\
";
  }

  static const char* value(const ::cooperative_driving_logic::ChangeStateRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cooperative_driving_logic::ChangeStateRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.target_state);
      stream.next(m.tag_id_to_follow);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ChangeStateRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cooperative_driving_logic::ChangeStateRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cooperative_driving_logic::ChangeStateRequest_<ContainerAllocator>& v)
  {
    s << indent << "target_state: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.target_state);
    s << indent << "tag_id_to_follow: ";
    Printer<int8_t>::stream(s, indent + "  ", v.tag_id_to_follow);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COOPERATIVE_DRIVING_LOGIC_MESSAGE_CHANGESTATEREQUEST_H
